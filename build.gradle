import groovy.json.JsonOutput
import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://dist.creeper.host/Sponge/maven' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.1'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${version_keystone}"
group = 'io.github.keystone' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'Keystone'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

def version_replaces = [
        'version_keystone': project.version,
        'version_forge': version_forge,
        'min_version_minecraft': min_version_minecraft,
        'max_version_minecraft': max_version_minecraft
]

def jsonPatterns = ["**/*.json", "**/*.mcmeta"]

processResources {
    duplicatesStrategy = DuplicatesStrategy.FAIL
    exclude 'META-INF/mods.toml'
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand version_replaces
    }
    //Minify json resources
    doLast {
        fileTree(dir: getOutputs().getFiles().getAsPath(), includes: jsonPatterns).each {
            File file -> file.setText(JsonOutput.toJson(new JsonSlurper().parse(file, 'UTF-8')))
        }
    }
}

task replaceInModsToml(type: Copy) {
    outputs.upToDateWhen { false }
    from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand version_replaces
    }
    into "$buildDir/resources/main/"
}

// When using "Run using IntelliJ" (the only option with well-working hotswapping) the used "resources" directory is
// different from the one used by gradle/the processResources task
task copyResourcesForIntelliJ(type: Copy) {
    from processResources.destinationDir
    into "$projectDir/out/production/resources"
}

processResources.finalizedBy replaceInModsToml, copyResourcesForIntelliJ

minecraft {
    mappings channel: 'official', version: "${version_minecraft}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=keystone.mixins.json"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                keystone {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=keystone.mixins.json"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                keystone {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg "-mixin.config=keystone.mixins.json"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'keystone', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                keystone {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "keystone.refmap.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    minecraft "net.minecraftforge:forge:${version_minecraft}-${version_forge}"
    shade "org.codehaus.janino:janino:${version_janino}"
}

artifacts {
    archives shadowJar
    shadow shadowJar
}

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.outputs.files.singleFile
    }
}

javadoc {
    source = sourceSets.main.java
    classpath = configurations.compile
}

jar {
    archiveName = archivesBaseName + "_" + version + "_API.jar";

    manifest {
        attributes([
                "Specification-Title": "Keystone",
                "Specification-Vendor": "CodeCracked",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"CodeCracked",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "keystone.mixins.json"
        ])
    }
}

shadowJar {
    archiveName = archivesBaseName + "_" + version + "_Forge_${version_minecraft}.jar";
    configurations = [project.configurations.shade]

    // Exclude samples and maven metadata
    exclude 'org/codehaus/commons/compiler/samples/**'
    exclude 'org/codehaus/janino/samples/**'
    exclude 'META-INF/maven/**'

    manifest {
        attributes([
            "Specification-Title": "Keystone",
            "Specification-Vendor": "CodeCracked",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"CodeCracked",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "keystone.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
shadowJar.finalizedBy('reobfJar')
jar.finalizedBy('javadoc')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}