plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'maven-publish'
    id 'java'
}

version = project.mod_version + '.' + project.mod_patch + '-' + project.minecraft_version
group = project.maven_group

loom {
    accessWidenerPath = file("src/main/resources/keystone.accesswidener")
}

// Dependency Maven Repositories
repositories {
    maven {
        name "tterrag maven"
        url "https://maven.tterrag.com/"
    }
    maven { url 'https://maven.terraformersmc.com/releases/' }
}

configurations {
    shadeIntransitive {
        transitive = false
    }
    shade

    implementation.extendsFrom shadeIntransitive
    implementation.extendsFrom shade
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Mod Dependencies
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    shade "org.codehaus.janino:janino:${project.janino_version}"

    // Optional Mod Dependencies
    modCompileOnly "com.terraformersmc:modmenu:${project.mod_menu_version}"
}

// Autofill fabric.mod.json values
processResources {
    def variables = [
            "version": project.version,
            "minecraft_version": project.minecraft_version,
            "loader_version": project.loader_version,
            "fabric_version": project.fabric_version
    ]
    inputs.properties(variables)
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand(variables)
    }
}

// Apply correct Java version
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = project.java_version as Integer
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }

    archivesBaseName = project.archive_base_name
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

// Shadow Configuration
shadowJar {
    archiveClassifier = 'shadow'
    configurations = [project.configurations.shade, project.configurations.shadeIntransitive]

    exclude 'org/codehaus/commons/compiler/samples/**'
    exclude 'org/codehaus/janino/samples/**'
    exclude 'META-INF/maven/**'

    enableRelocation true
    relocationPrefix "keystone.shadow"
}
remapJar {
    archiveClassifier = 'fabric'

    dependsOn shadowJar
    input.set shadowJar.archiveFile.get()

    exclude 'org/codehaus/commons/compiler/samples/**'
    exclude 'org/codehaus/janino/samples/**'
    exclude 'META-INF/maven/**'
}
artifacts {
    archives shadowJar
    shadow shadowJar
}
tasks.shadowJar.finalizedBy tasks.remapJar

javadoc {
    source = sourceSets.main.java
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
